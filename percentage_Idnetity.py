#!/usr/bin/python3
from Bio import pairwise2
from Bio.Seq import Seq
from Bio.SeqUtils import nt_search
from itertools import combinations

# List of protein sequences
sequences = [
    "MKTAYIAKQRQISFVKSHESRQLEERLGLIEVQAPILSRVGDITQDNLSGAEKAVQVKFKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEKAVQVKVKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQALILSRVGDGTQDNLSGAEKAVQVKVKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLINVQAPILSRVGDGTQDNLSGAEKWVQVKVKAL",
    "MKTAYAAKQRQISFVKSHFSRQLEERLGLVEDQAPILSRVGDGTQDNLSGAEKAVQVKVEAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGIGEQDNLSGAEKAVQVKVKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVFAPILTRVGDGTQDNLSGAELAVQWKVKAL",
    "MKTAYIAKQRQISFLKSHFSRQLEERLGLIEVQAPILVRVGDGTQDNLSGAEKAVQVKVKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSWAEKAVQVKVKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRKGDGTQDNLSGAEKAVQVKVKAL",
    "METAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGAGTQDNLSGAEKAVQVAVKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVHDGTQDNLSGQEKAVQVKVKAL",
    "MKTAYIAKQRQISFVKSHKSRQLEERLGLVEVWAPILSRVGDGTQDNLSGAEKAVQVKVKAL",
    "MKTAYIAKQRQYSFVKSHLSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEKAVQVKVKAL",
    "MKTAYMAKQRQIKFVKSHFSRQLEERLLLIEVQAPILGRVGDVTQDNLSGAEKRVQVKVKAL",
    "MKTAYIAKQRQISFWKSHFSRQLEERSGLIEVQAPILSRVVDGTQDNLSGAEKAVQVKVKAL",
    "MKTAYIAKQRQISFVKSHFSRQLEERLGLIRVQAPILSGVGDGTQDNLSGAEKAVQVKVKAL",
    "MKTAYFAKQRQSSFVKSHFSRQLEERLGLIEVQAPILSRVGTGTQDNLSGAEKAVQCKVKAL",
    "MKTAYIAKQREISFVKSHFSRYLEERLGFIEVQAPILSRVGDGTQDNWSGAEKAVQVKVMAL"
]

# Define a function to calculate percentage identity
def calculate_percentage_identity(seq1, seq2):
    alignment = pairwise2.align.globalxx(seq1, seq2, score_only=True)
    length = max(len(seq1), len(seq2))
    identity = alignment / length * 100
    return identity

# Find pairs with at least 30% identity
pairs_with_30_percent_identity = []
for pair in combinations(sequences, 2):
    identity = calculate_percentage_identity(pair[0], pair[1])
    if identity >= 30:
        pairs_with_30_percent_identity.append(pair)

# Print the pairs
print("Pairs with at least 30% identity:")
for pair in pairs_with_30_percent_identity:
    print(pair)

